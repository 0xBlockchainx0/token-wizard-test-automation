token token-wizard-builds
a1a9a14f4c1cb8c71dc0c3b0df3be1cc53f2303b   poanetwork/token-wizard-test-automation

curl -u a1a9a14f4c1cb8c71dc0c3b0df3be1cc53f2303b: \
     -d build_parameters[CIRCLE_JOB]=build \
     https://circleci.com/api/v1.1/project/github/poanetwork/token-wizard-test-automation/tree/master

     - run:
               name: Creating Artifacts
               command: |
                 sudo echo "my artifact file" > ~/ddd/artifact-1;
                 # sudo mkdir ~/ddd/artifacts;
                 # sudo echo "my artifact files in a dir" > ~/ddd/artifacts/artifact-2;



async.series([
	doc.useServiceAccountAuth(creds,  function (err) {

		// Get all of the rows from the spreadsheet.
		 doc.getCells(1, {
			'min-row': 1,
			'max-row': 1,
			'min-col': 1,
			'max-col': 1,
			'return-empty': true
		}, function (err, cells) {
			var cell = cells[0];
			console.log(cell.value);
			 return cell.value;

		});
	});


]
)
function writeSheet(val) {
	return doc.useServiceAccountAuth(creds,  function (err) {

		// Get all of the rows from the spreadsheet.
		doc.getCells(1, {
			'min-row': 1,
			'max-row': 1,
			'min-col': 1,
			'max-col': 1,
			'return-empty': true
		}, function (err, cells) {
			var cell = cells[0];
			cell.value=val;
			cell.save();


		});
	});

}

async.series([readSheet(),readSheet()]);


async.series([
		function setAuth(step) {

			doc.useServiceAccountAuth(creds, step);
		},
		function getInfoAndWorksheets(step) {
			doc.getInfo(function( err,info) {

				sheet = info.worksheets[0];
				step();

			});
		},
		function workingWithCells(step) {
			sheet.getCells({
				'min-row': 1,
				'max-row': 1,
				'min-col': 1,
				'max-col': 1,
				'return-empty': true
			}, async function(err, cells) {
				var cell = cells[0];
				//console.log("cell= "+cell.value);
				await fs.writeFileSync(fileName, cell.value);
				if (cell.value != '1') {
					cell.value = '1';
					cell.save();
				}
				step();
			});
		}
	], function(err){

		var ss = fs.readFileSync(fileName, "utf8");
		return ss;
	});

	var s = await fs.readFileSync(fileName, "utf8");
	return s;

}


 test.it('Warning is displayed if investor try to buy from foreign network', async function() {
	    assert.equal(flagCrowdsale,true);
    	b=true;
        investor=ForeignInvestor;
        await investor.setMetaMaskAccount();
        await investor.open(crowdsale.url);
        b=await investor.confirmPopup();
        assert.equal(b, true, "Test failed. Warning does not displayed");
        b=true;
        b = await investor.contribute(crowdsale.currency.tiers[0].supply/2);
        assert.equal(b, false, "Test FAILED.  Investor can buy from foreign network");
        logger.error("Test PASSED. Warning present if investor try to buy from foreign network. Investor can not buy from foreign network");

    });





